[
  {
    "date": "2025-02-28T11:30:00",
    "duration": 2,
    "slides": [
      {
        "name": "WS-Rest",
        "link": "https://github.com/SviluppoWebAvanzato-Univaq/SWA_Lecture_Slides"
      }
    ],
    "arguments": [
      {
        "en": "Course presentation",
        "it": "Presentazione del corso"
      },
      {
        "en": "Why (web) services are an effective way to develop software",
        "it": "Perch\u00e9 i servizi (web) sono un modo efficace di sviluppare software"
      },
      {
        "en": "The distributed (web) services story: from RPC to RESTful",
        "it": "La storia dei servizi (web) distribuiti: dalla RPC al RESTful"
      },
      {
        "en": "Course topics: RESTful web services",
        "it": "Presentazione degli argomenti: RESTful web services"
      },
      {
        "en": "RESTful services as an extension to standard web applications",
        "it": "I servizi RESTful come estensione delle applicazioni web standard",
        "type": "esempio"
      },
      {
        "en": "RESTful services as a base for client-side applications like SPA (Angular, React, etc.)",
        "it": "I servizi RESTful come elemento base delle applicazioni fortemente client side come le SPA (Angular, React, ecc.)",
        "type": "esempio"
      },
      {
        "en": "RESTful services as a base for mobile apps",
        "it": "I servizi RESTful come elemento base delle applicazioni mobili",
        "type": "esempio"
      },
      {
        "en": "Course topics: RESTful web services design",
        "it": "Presentazione degli argomenti: progettazione di servizi RESTful"
      },
      {
        "en": "Course topics: RESTful web services implementation (Java, PHP)",
        "it": "Presentazione degli argomenti: implementazione di servizi RESTful (Java, PHP)"
      },
      {
        "en": "Course topics: RESTful clients implementation (Java, PHP, Javascript)",
        "it": "Presentazione degli argomenti: implementazione di client RESTful (Java, PHP, Javascript)"
      },
      {
        "en": "Web services and Web 2.0",
        "it": "I Web services nel Web 2.0"
      },
      {
        "en": "What web services really are?",
        "it": "Cosa sono i web services veramente?"
      },
      {
        "en": "What is the role of web services in web 2.0?",
        "it": "Che ruolo giocano i web services nel web 2.0?"
      },
      {
        "en": "Analysis of some services published by the Public Administration on the web",
        "it": "Analisi di servizi pubblicati su web dalla PA",
        "type": "esempio"
      },
      {
        "en": "An example of real web services: Amazon",
        "it": "Un esempio di veri web services: Amazon",
        "type": "esempio"
      },
      {
        "en": "Making the Public Administration services real web services",
        "it": "Realizzare i servizi della PA come veri web services",
        "type": "esempio"
      },
      {
        "en": "RESTful web services: when to use them, and what alternatives exist",
        "it": "I servizi web RESTful: quando usarli, e quali alternative esistono"
      }
    ],
    "title": {
      "en": "Introduction to (RESTful) web services",
      "it": "Introduzione ai (RESTful) web services"
    }
  },
  {
    "date": "2025-03-07T11:30:00",
    "duration": 2,
    "slides": [
      {
        "name": "Restful",
        "link": "https://github.com/SviluppoWebAvanzato-Univaq/SWA_Lecture_Slides"
      }
    ],
    "arguments": [
      {
        "en": "Basic features of a RESTful service: protocols, formats, methods",
        "it": "Caratteristiche di base di un servizio RESTful: protocolli, formati, metodi"
      },
      {
        "en": "Semantics of a RESTful web service: what kind of application it is best suited for?",
        "it": "Semantica di un servizio web RESTful: a quali tipi di applicazione si adatta meglio?"
      },
      {
        "en": "RESTful services URL structure",
        "it": "Struttura delle URL in un servizio RESTful"
      },
      {
        "en": "Mapping resources to URLs: the basic collection-item structure",
        "it": "Mappare le risorse sulle URL: la struttura di base collection-item"
      },
      {
        "en": "Mapping relational structures to RESTful URLs",
        "it": "Mappare strutture relazionali su URL RESTful",
        "type": "esempio"
      },
      {
        "en": "CRUD RESTful operations: the GET method",
        "it": "Operazioni CRUD via RESTful: il metodo GET",
        "attachments": [
          {
            "link": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET"
          }
        ]
      },
      {
        "en": "GET on collections: SELECT",
        "it": "GET su collezioni: SELECT",
        "type": "esempio"
      },
      {
        "en": "GET on collections with a query string: SELECT * WHERE",
        "it": "GET su collezioni con query string: SELECT * WHERE",
        "type": "esempio"
      },
      {
        "en": "Encoding of  data returned by a GET and the Accept/Content-Type headers",
        "it": "La codifica dei dati restituiti da una GET e gli header Accept/Content-Type"
      },
      {
        "en": "The return value of GET on collections: records or keys  list?",
        "it": "Il valore di ritorno delle GET su collezioni: lista di record o di sole chiavi?"
      },
      {
        "en": "GET on collections: use of the query string to create a LIMIT clause",
        "it": "GET su collezioni: usare la query string per simulare la clausola LIMIT",
        "type": "esempio"
      },
      {
        "en": "GET: HTTP return status",
        "it": "GET: stati HTTP di ritorno",
        "attachments": [
          {
            "link": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"
          }
        ]
      }
    ],
    "title": {
      "en": "RESTful services semantics 1",
      "it": "La semantica dei servizi RESTful 1"
    }
  },
  {
    "date": "2025-03-14T11:30:00",
    "duration": 2,
    "slides": [
      {
        "name": "Restful",
        "link": "https://github.com/SviluppoWebAvanzato-Univaq/SWA_Lecture_Slides"
      }
    ],
    "arguments": [
      {
        "en": "GET on item: SELECT * WHERE id = ...",
        "it": "GET su item: SELECT * WHERE id=...",
        "type": "esempio"
      },
      {
        "en": "GET on attributes: SELECT a WHERE id = ...",
        "it": "GET su attributi: SELECT a WHERE id=...",
        "type": "esempio"
      },
      {
        "en": "GET: HTTP return status",
        "it": "GET: stati HTTP di ritorno",
        "attachments": [
          {
            "link": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"
          }
        ]
      },
      {
        "en": "CRUD RESTful operations: the PUT method",
        "it": "Operazioni CRUD via RESTful: il metodo PUT",
        "attachments": [
          {
            "link": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PUT"
          }
        ]
      },
      {
        "en": "PUT on item: global UPDATE of a specific record",
        "it": "PUT su item: UPDATE globale su uno specifico record",
        "type": "esempio"
      },
      {
        "en": "The payload of the PUT method and the Content-Type header",
        "it": "Il payload del metodo PUT e l'header Content-Type"
      },
      {
        "en": "PUT on attributes: UPDATE of individual attributes in a specific record",
        "it": "PUT su attributi: UPDATE di singoli attributi in uno specifico record",
        "type": "esempio"
      },
      {
        "en": "PUT on collections: replacement of an entire collection",
        "it": "PUT su collezioni: sostituzione di un'intera collezione",
        "type": "esempio"
      },
      {
        "en": "PUT: HTTP return status",
        "it": "PUT: stati HTTP di ritorno"
      },
      {
        "en": "CRUD RESTful operations: the PATCH method",
        "it": "Operazioni CRUD via RESTful: il metodo PATCH",
        "attachments": [
          {
            "link": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH"
          }
        ]
      },
      {
        "en": "PATCH on item: partial UPDATE of a specific record",
        "it": "PATCH su item: UPDATE parziale su uno specifico record",
        "type": "esempio"
      },
      {
        "en": "Extension of PUT semantics in environments not supporting the PATCH",
        "it": "Estensione della semantica PUT in ambienti che non supportano la PATCH"
      },
      {
        "en": "CRUD RESTful operations: the POST method",
        "it": "Operazioni CRUD via RESTful: il metodo POST",
        "attachments": [
          {
            "link": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST"
          }
        ]
      },
      {
        "en": "POST on collections: INSERT of a new record",
        "it": "POST su collezioni: INSERT di un nuovo record",
        "type": "esempio"
      },
      {
        "en": "The payload of the POST method and the Content-Type header",
        "it": "Il payload del metodo POST e l'header Content-Type"
      },
      {
        "en": "POST: HTTP return status and values",
        "it": "POST: stati HTTP e valori di ritorno"
      },
      {
        "en": "CRUD RESTful operations: the DELETE method",
        "it": "Operazioni CRUD via RESTful: il metodo DELETE",
        "attachments": [
          {
            "link": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE"
          }
        ]
      },
      {
        "en": "DELETE on item: DELETE of a specific record",
        "it": "DELETE su item: DELETE di un record specifico",
        "type": "esempio"
      },
      {
        "en": "DELETE on collections: emptying a table",
        "it": "DELETE su collezioni: svuotamento di una tabella",
        "type": "esempio"
      },
      {
        "en": "DELETE: HTTP return status",
        "it": "DELETE: stati HTTP di ritorno"
      },
      {
        "en": "Other HTTP methods: HEAD, OPTIONS",
        "it": "Altri metodi HTTP: HEAD, OPTIONS",
        "attachments": [
          {
            "link": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD"
          },
          {
            "link": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/OPTIONS"
          }
        ]
      },
      {
        "en": "HEAD on resource: metadata check",
        "it": "HEAD su risorsa: controllo dei metadati",
        "type": "esempio"
      },
      {
        "en": "HEAD used to control resource caching",
        "it": "HEAD usato per il caching delle risorse",
        "type": "esempio"
      },
      {
        "en": "OPTIONS on a resource: allowed methods check",
        "it": "OPTIONS su risorsa: controllo sui metodi supportati",
        "type": "esempio"
      },
      {
        "en": "The same-origin-policy issue for services",
        "it": "Il problema della same-origin-policy per i servizi",
        "attachments": [
          {
            "link": "https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"
          }
        ]
      },
      {
        "en": "How to grant access to RESTful services from outside (their domain): CORS",
        "it": "Permettere l'accesso ai propri servizi RESTful dall'esterno (del loro dominio): CORS",
        "attachments": [
          {
            "link": "https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"
          }
        ]
      },
      {
        "en": "OPTIONS and CORS: the resource preflight",
        "it": "OPTIONS e CORS: la preflight delle risorse",
        "attachments": [
          {
            "link": "https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request"
          }
        ]
      },
      {
        "en": "RESTful RMI-type operations",
        "it": "Operazioni di tipo RMI via RESTful"
      },
      {
        "en": "How to specify an object (context) and a method to be invoked thorugh an URL",
        "it": "Specificare un oggetto (contesto) e un metodo da invocare tramite una URL"
      },
      {
        "en": "The POST method used to make an RMI",
        "it": "Il metodo POST utilizzato per effettuare una RMI",
        "type": "esempio"
      },
      {
        "en": "Encoding the parameters and the return value of a method invoked via POST",
        "it": "Codifica dei parametri e del valore di ritorno di un metodo invocato tramite POST"
      },
      {
        "en": "Payload and result for the POST method: Accept and Content-Type header",
        "it": "Payload e risultato del metodo POST: header Accept e Content-Type"
      },
      {
        "en": "POST for RMI: HTTP return status",
        "it": "POST per RMI: stati HTTP di ritorno"
      },
      {
        "en": "RESTful RMI-type operations: GET for read methods (derived attributes)",
        "it": "Operazioni di tipo RMI via RESTful: usare GET per metodi di lettura (attributi calcolati)",
        "type": "esempio"
      },
      {
        "en": "The POST method as an alternative to  GET on collections to define complex filters",
        "it": "Usare il metodo POST come alternativa alla GET su collezione per definire filtri complessi",
        "type": "esempio"
      }
    ],
    "title": {
      "en": "RESTful services semantics 2",
      "it": "La semantica dei servizi RESTful 2"
    }
  },
  {
    "date": "2025-03-21T11:30:00",
    "duration": 2,
    "arguments": [
      {
        "en": "Security in RESTful APIs",
        "it": "Sicurezza nelle API RESTful"
      },
      {
        "en": "The role of the access token in API security",
        "it": "Il ruolo del token di accesso nella sicurezza delle API",
        "attachments": [
          {
            "link": "https://datatracker.ietf.org/doc/html/rfc7519"
          }
        ]
      },
      {
        "en": "How to exchange the access token: from base methods (query string, path) to Bearer Authorization",
        "it": "Come scambiarsi il token di accesso: dai metodi rudimentali (query string, path) alla Bearer Authorization"
      },
      {
        "en": "Managing the expiration and refreshing access tokens",
        "it": "Gestire la scadenza e il refresh dei token di accesso"
      },
      {
        "en": "Generating access tokens: authentication schemes",
        "it": "Generare i token di accesso: schemi di autenticazione"
      },
      {
        "en": "How to implement the login/logout technique in a RESTful service",
        "it": "Realizzare la tecnica del login/logout in un servizio RESTful",
        "type": "esempio"
      },
      {
        "en": "OAuth: an advanced authentication system for services",
        "it": "OAuth: un sistema di autenticazione particolarmente adatto ai servizi",
        "attachments": [
          {
            "link": "https://datatracker.ietf.org/doc/html/rfc6749"
          },
          {
            "link": "https://datatracker.ietf.org/doc/html/rfc6750"
          },
          {
            "link": "https://oauth.net/2"
          }
        ]
      },
      {
        "en": "The OAuth 2 authorization flow",
        "it": "Il flusso di autorizzazione OAuth 2"
      },
      {
        "en": "The benefits of OAuth: no stored credentials and scoped authorization codes",
        "it": "I vantaggi di OAuth: nessuna memorizzazione delle credenziali e codici di autorizzazione con contesto"
      },
      {
        "it": "OAuth nel mondo reale",
        "en": "OAuth in the real world",
        "type": "esempio",
        "attachments": [
          {
            "link": "https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow"
          }
        ]
      },
      {
        "en": "The events case study",
        "it": "Il caso di studio events",
        "type": "esempio",
        "attachments": [
          {
            "name": "REST_Specs",
            "link": "https://github.com/SviluppoWebAvanzato-Univaq/Specifications_REST/tree/main/2024"
          }
        ]
      }
    ],
    "title": {
      "en": "RESTful services security",
      "it": "La sicurezza nei servizi RESTful"
    }
  },
  {
    "date": "2025-03-28T11:30:00",
    "duration": 2,
    "arguments": [
      {
        "en": "The events case study",
        "it": "Il caso di studio events",
        "type": "esempio",
        "attachments": [
          {
            "name": "REST_Specs",
            "link": "https://github.com/SviluppoWebAvanzato-Univaq/Specifications_REST/tree/main/2024"
          }
        ]
      },
      {
        "en": "Introduction to the JSON format",
        "it": "Introduzione al formato JSON",
        "attachments": [
          {
            "link": "https://www.json.org"
          }
        ]
      },
      {
        "en": "Defining the JSON structures required by a service (or inherit them from the code!)",
        "it": "Definire le strutture JSON necessarie a un servizio (o ereditarle da codice!)"
      },
      {
        "en": "Identifying the collection-item pattern within the API",
        "it": "Identificare il pattern collection-item all'interno delle API"
      },
      {
        "en": "Defining an  URL structure consistent with the API",
        "it": "Definire una struttura di URL coerente con le API"
      },
      {
        "en": "Outside the pattern: when violating the standard RESTful semantic helps us to be more efficient",
        "it": "Fuori dal pattern: quando violare la semantica standard RESTful ci aiuta a essere pi\u00f9 efficienti"
      },
      {
        "en": "Mapping methods and payloads on URLs",
        "it": "Mappare metodi e payload sulle URL"
      },
      {
        "en": "Managing binaries correctly and effectively",
        "it": "Gestire i binari in maniera corretta ed efficace"
      },
      {
        "en": "The events case study RESTful API",
        "it": "La RESTful API per il caso di studio events",
        "type": "esempio",
        "attachments": [
          {
            "name": "REST_Specs_RESTful",
            "link": "https://github.com/SviluppoWebAvanzato-Univaq/Specifications_REST/tree/main/2024"
          }
        ]
      },
      {
        "en": "Introduction to JSON Schema",
        "it": "Introduzione a JSON Schema"
      }
    ],
    "title": {
      "en": "RESTful services: a case study",
      "it": "Progettazione di un servizio RESTful"
    }
  },
  {
    "date": "2025-04-04T11:30:00",
    "duration": 2,
    "slides": [
      {
        "name": "JSONSchema",
        "link": "https://github.com/SviluppoWebAvanzato-Univaq/SWA_Lecture_Slides"
      }
    ],
    "arguments": [
      {
        "en": "JSON Schema: basic structure and annotations",
        "it": "JSON Schema: struttura base e annotazioni",
        "attachments": [
          {
            "link": "https://json-schema.org/specification.html"
          }
        ]
      },
      {
        "en": "JSON Schema: meaning of the empty schema and \"modeling by restrictions\" technique",
        "it": "JSON Schema: significato della schema vuoto e tecnica della modellazione per restrizioni"
      },
      {
        "en": "JSON Schema: data types",
        "it": "JSON Schema: i tipi di dato"
      },
      {
        "en": "JSON Schema: string type and constraints",
        "it": "JSON Schema: tipo stringa e relativi vincoli"
      },
      {
        "en": "JSON Schema: numeric types and constraints",
        "it": "JSON Schema: tipi numerici e relativi vincoli"
      },
      {
        "en": "JSON Schema: object type and property specification",
        "it": "JSON Schema: tipo oggetto e specifica delle propriet\u00e0"
      },
      {
        "en": "JSON Schema: object type constraints",
        "it": "JSON Schema: vincoli del tipo oggetto"
      },
      {
        "en": "JSON Schema: array type and constraints",
        "it": "JSON Schema: tipo array e relativi vincoli"
      },
      {
        "en": "JSON Schema: enumerations",
        "it": "JSON Schema: enumerazioni"
      },
      {
        "en": "JSON Schema: schema composition (allOf, anyOf, oneOf, not)",
        "it": "JSON Schema: composizione di schemi (allOf, anyOf, oneOf, not)"
      },
      {
        "en": "JSON Schema: schema references and modularization ($ref property)",
        "it": "JSON Schema: riferimenti a schemi e modularizzazione (propriet\u00e0 $ref)"
      },
      {
        "en": "The event data structure defined with JSON Schema",
        "it": "La struttura dati evento definita con JSON Schema",
        "type": "esempio",
        "attachments": [
          {
            "name": "Event_Object.json",
            "link": "https://github.com/SviluppoWebAvanzato-Univaq/Specifications_REST/blob/main/2024/Event_Object.json"
          },
          {
            "name": "Event_Object_Schema.json",
            "link": "https://github.com/SviluppoWebAvanzato-Univaq/Specifications_REST/blob/main/2024/Event_Object_Schema.json"
          }
        ]
      },
      {
        "en": "The YAML (meta) language",
        "it": "Il (meta) linguaggio YAML",
        "attachments": [
          {
            "link": "https://yaml.org/spec"
          }
        ]
      },
      {
        "en": "Relationships between YAML and JSON",
        "it": "Relazioni tra YAML e JSON"
      },
      {
        "en": "YAML syntax: scalars, objects and arrays",
        "it": "La sintassi YAML: scalari, oggetti e array"
      }
    ],
    "title": {
      "all": "JSON Schema"
    }
  },
  {
    "date": "2025-04-11T11:30:00",
    "duration": 2,
    "slides": [
      {
        "name": "OpenAPI",
        "link": "https://github.com/SviluppoWebAvanzato-Univaq/SWA_Lecture_Slides"
      }
    ],
    "arguments": [
      {
        "en": "Introduction to OpenAPI 3",
        "it": "Presentazione di OpenAPI 3"
      },
      {
        "en": "OpenAPI online tools and specification",
        "it": "Tool e specifiche OpenAPI reperibili online",
        "attachments": [
          {
            "link": "https://www.openapis.org/"
          },
          {
            "link": "https://swagger.io/tools/open-source/"
          }
        ]
      },
      {
        "en": "OpenAPI: basic structure",
        "it": "OpenAPI: struttura di base"
      },
      {
        "en": "Using the Swagger editor to create an OpenAPI specification",
        "it": "Usare lo Swagger editor per creare una specifica OpenAPI",
        "type": "esempio",
        "attachments": [
          {
            "link": "https://editor-next.swagger.io/"
          }
        ]
      },
      {
        "en": "OpenAPI: info object",
        "it": "OpenAPI: oggetto info"
      },
      {
        "en": "OpenAPI: tags object",
        "it": "OpenAPI: oggetto tags"
      },
      {
        "en": "OpenAPI: externalDocs object",
        "it": "OpenAPI: oggetto externalDocs"
      },
      {
        "en": "OpenAPI: servers",
        "it": "OpenAPI: servers"
      },
      {
        "en": "OpenAPI: specification factorization and components object",
        "it": "OpenAPI: fattorizzazione della specifica e oggetto components"
      },
      {
        "en": "OpenAPI: schema components",
        "it": "OpenAPI: componenti di tipo schema"
      },
      {
        "en": "OpenAPI: parameter components",
        "it": "OpenAPI: componenti di tipo parameter"
      },
      {
        "en": "The events RESTful service specification with OpenAPI 3: base structure, schemas and parameters",
        "it": "La specifica del servizio RESTful events con OpenAPI 3: struttura base, schemi e parametri",
        "type": "esempio"
      }
    ],
    "title": {
      "all": "OpenAPI /1"
    }
  },
  {
    "date": "2025-05-09T11:30:00",
    "duration": 2,
    "slides": [
      {
        "name": "OpenAPI",
        "link": "https://github.com/SviluppoWebAvanzato-Univaq/SWA_Lecture_Slides"
      }
    ],
    "arguments": [
      {
        "en": "OpenAPI: response components",
        "it": "OpenAPI: componenti di tipo response"
      },
      {
        "en": "The events RESTful service specification with OpenAPI 3: base structure, schemas, parameters and responses",
        "it": "La specifica del servizio RESTful events con OpenAPI 3: struttura base, schemi, parametri e risposte",
        "type": "esempio"
      },
      {
        "en": "OpenAPI: requestBody components",
        "it": "OpenAPI:  componenti di tipo requestBody "
      },
      {
        "en": "OpenAPI: securityScheme components",
        "it": "OpenAPI:  componenti di tipo securityScheme "
      },
      {
        "en": "OpenAPI: endpoints: basic structure of the paths object",
        "it": "OpenAPI: specificare gli endpoint: struttura di base dell'oggetto paths"
      },
      {
        "en": "OpenAPI: parametric URLs in the paths object",
        "it": "OpenAPI: definire URL parametriche nell'oggetto paths"
      },
      {
        "en": "OpenAPI: endpoint parameters (parameters)",
        "it": "OpenAPI: definire i parametri di un endpoint (parameters)"
      },
      {
        "en": "Path-level and method-level parameters",
        "it": "Parametri di livello path e metodo"
      },
      {
        "en": "OpenAPI: response status and corresponding content (responses)",
        "it": "OpenAPI: definire i possibili stati di risposta e associare il realtivo contenuto (responses)"
      },
      {
        "en": "OpenAPI: request content (requestBody)",
        "it": "OpenAPI: definire il contenuto delle richieste (requestBody)"
      },
      {
        "en": "OpenAPI: security requirements of an endpoint (security)",
        "it": "OpenAPI: definire i requisiti di sicurezza di un endpoint (security)"
      },
      {
        "en": "The events RESTful service specification with OpenAPI 3",
        "it": "La specifica del servizio RESTful events con OpenAPI 3",
        "type": "esempio",
        "attachments": [
          {
            "name": "Event_OpenAPI.yaml",
            "link": "https://github.com/SviluppoWebAvanzato-Univaq/Specifications_REST/blob/main/2024/Event_OpenAPI.yaml"
          }
        ]
      },
      {
        "en": "Developing a RESTful service with JAX-RS",
        "it": "Sviluppo di progetti RESTful con JAX-RS",
        "attachments": [
          {
            "link": "https://eclipse-ee4j.github.io/jersey/"
          }
        ]
      }
    ],
    "title": {
      "all": "OpenAPI /2"
    }
  },
  {
    "date": "2025-05-16T11:30:00",
    "duration": 2,
    "attachments": [
      {
        "name": "JAXRS_Examples",
        "link": "https://github.com/SviluppoWebAvanzato-Univaq/JAXRS_Examples"
      }
    ],
    "arguments": [
      {
        "en": "How to create a new JAX-RS server application",
        "it": "Creare una nuova applicazione server JAX-RS",
        "type": "esempio",
        "attachments": [
          {
            "name": "JAXRS_Base_T10",
            "link": "https://github.com/SviluppoWebAvanzato-Univaq/JAXRS_Base_T10"
          }
        ]
      },
      {
        "en": "Configuring JAX-RS with service providers and resources: the Application class and  @ApplicationPath annotation",
        "it": "Configurare JAX-RS con le risorse e i provider necessari: la classe Application e l'annotazione @ApplicationPath"
      },
      {
        "en": "Marking classes as (root) RESTful resources: the @Path annotation",
        "it": "Marcare le classi come risorse (root) RESTful: l'annotazione @Path"
      },
      {
        "en": "Marking class methods to answer HTTP methods: the @GET annotation",
        "it": "Marcare i metodi di una classe per rispondere ai metodi HTTP: l'annotazione @GET"
      },
      {
        "en": "RESTful output type for a method: the @Produces annotation",
        "it": "Identificare il tipo RESTful di output di un metodo: l'annotazione @Produces"
      },
      {
        "en": "JAX-RS method return types and automatic type conversion",
        "it": "Tipi restituibili da JAX-RS e conversione automatica di tipo"
      },
      {
        "en": "Automatic JSON encoding of complex return types: lists, maps, objects",
        "it": "Restituire tipo complessi con codifica automatica JSON: liste, mappe, oggetti"
      },
      {
        "en": "Required structure for Java objects to be automatically encoded and decoded in JSON",
        "it": "Oggetti Java (de)codificabili in JSON: caratteristiche richieste"
      },
      {
        "en": "The @JsonIgnore annotation used to exclude class fields from the JSON output",
        "it": "L'annotazione @JsonIgnore per escludere campi dall'ouput"
      },
      {
        "en": "Using the Response class to build RESTful responses",
        "it": "Usare la classe Response per costruire le risposte RESTful"
      },
      {
        "en": "Returning status codes and building complex responses with the Response class",
        "it": "Restituire codici di stato e costruire risposte complesse con la classe Response"
      },
      {
        "en": "Handling and encapsulating exceptions: the WebApplicationException class",
        "it": "Gestire e incapsulare le eccezioni: la classe WebApplicationException"
      },
      {
        "en": "How to inject a query parameter in a method with the @QueryParam annotation",
        "it": "Iniettare un parametro di query in quelli di un metodo con l'annotazione @QueryParam"
      },
      {
        "en": "The @Path annotation on methods to identify sub-resources",
        "it": "Uso dell'annotazione @Path sui metodi per identificare sotto-risorse"
      },
      {
        "en": "The @Path annotation with parameters",
        "it": "Uso dell'annotazione @Path con parti parametriche"
      },
      {
        "en": "How to inject a URL parameter in a method with the @PathParam annotation",
        "it": "Iniettare un parametro della URL in quelli di un metodo con l'annotazione @PathParam"
      }
    ],
    "title": {
      "all": "JAX-RS /1"
    }
  },
  {
    "date": "2025-05-23T11:30:00",
    "duration": 2,
    "attachments": [
      {
        "name": "JAXRS_Examples",
        "link": "https://github.com/SviluppoWebAvanzato-Univaq/JAXRS_Examples"
      }
    ],
    "arguments": [
      {
        "en": "Returning a binary download",
        "it": "Restituire un binario da scaricare"
      },
      {
        "en": "Returning a stream: StreamingOutput",
        "it": "Restituire uno stream: StreamingOutput"
      },
      {
        "en": "Implementation of REST methods: the @POST annotation",
        "it": "Implementazione dei metodi REST: l'annotazione @POST "
      },
      {
        "en": "RESTful input type for a method: the @Consumes annotation",
        "it": "Identificare il tipo RESTful di input di un metodo: l'annotazione @Consumes"
      },
      {
        "en": "How to inject the request payload in a method",
        "it": "Iniettare il payload di una richiesta in un metodo"
      },
      {
        "en": "Data types for payloads: strings, numbers, InputStreams",
        "it": "Tipi di dati accettabili come payload: stringhe, numeri, InputStream"
      },
      {
        "en": "Automatic Java bean decoding from a JSON payload",
        "it": "Decodifica automatica di Java bean dal payload JSON"
      },
      {
        "en": "Using the UriInfo class to generate URIs to internal resources of a REST application",
        "it": "Usare la classe UriInfo per generare URI di risorse REST interne all'applicazione"
      },
      {
        "en": "Implementation of REST methods: the @PUT annotation",
        "it": "Implementazione dei metodi REST: l'annotazione @PUT"
      },
      {
        "en": "Implementation of REST methods: the @DELETE annotation",
        "it": "Implementazione dei metodi REST: l'annotazione @DELETE"
      },
      {
        "en": "Summary of JAX-RS techniques for single-class resources",
        "it": "Riassunto delle tecniche utilizzabili con JAX-RS in una singola classe-risorsa"
      },
      {
        "en": "A development pattern for RESTful services: sub-resources",
        "it": "Un pattern di sviluppo per i servizi RESTful: le sotto-risorse"
      },
      {
        "en": "Define and return a REST sub-resource with the @Path annotation",
        "it": "Definire e restituire una sotto risorsa REST con l'annotazione @Path"
      },
      {
        "en": "RESTful design with JAX-RS: when and how to use sub-resources?",
        "it": "Progettazione RESTful con JAX-RS: quando e come utilizzare le sotto-risorse?"
      },
      {
        "en": "The events RESTful service developed with JAX-RS",
        "it": "Il servizio RESTful events realizzato con JAX-RS",
        "type": "esempio",
        "attachments": [
          {
            "name": "JAXRS_Example_Events",
            "link": "https://github.com/SviluppoWebAvanzato-Univaq/JAXRS_Example_Events"
          }
        ]
      },
      {
        "en": "RESTful API and authentication: returning an authentication token (authentication header, cookie or plain payload)",
        "it": "Autenticazione in un'API RESTful: come restituire un token di autenticazione (header authentication, cookie o semplice payload"
      },
      {
        "en": "How to define authentication-related annotations in JAX-RS",
        "it": "Definire annotazioni associate alla sicurezza/autenticazione in JAX-RS"
      },
      {
        "en": "Limit access to a RESTful method with an authentication annotation",
        "it": "Limitare l'accesso a un metodo RESTful con un'annotazione di autenticazione"
      },
      {
        "en": "How to write a authentication filter in JAX-RS",
        "it": "Scrivere un filtro di autenticazione in JAX-RS"
      }
    ],
    "title": {
      "all": "JAX-RS /2"
    }
  },
  {
    "date": "2025-05-30T11:30:00",
    "duration": 2,
    "arguments": [
      {
        "en": "How to inject authenticated user information in a RESTful method",
        "it": "Iniettare le informazioni sull'utente autenticato in un metodo RESTful"
      },
      {
        "en": "RESTful API and authentication: returning an authentication token (authentication header, cookie or plain payload)",
        "it": "Autenticazione in un'API RESTful: come restituire un token di autenticazione (header authentication, cookie o semplice payload"
      },
      {
        "en": "Creating advanced custom (de)serializers",
        "it": "Creare (de)serializzatori custom avanzati"
      },
      {
        "en": "Creating a custom (de)serializer for the Event class",
        "it": "Creare un (de)serializzatore custom per la classe Event",
        "type": "esempio"
      },
      {
        "en": "Handling exceptions: the ExceptionMapper class",
        "it": "Gestire le eccezioni: la classe ExceptionMapper"
      },
      {
        "en": "How to add CORS headers and handle preflight requests with a filter",
        "it": "Inserire gli header CORS e gestire le richieste di preflight con un filtro"
      },
      {
        "en": "RESTful clients in Java with the Apache HTTPComponents Client library",
        "it": "Client RESTful in Java con la libreria Apache HTTPComponents Client"
      },
      {
        "en": "A Java client for the events RESTful service",
        "it": "Un client Java per il servizio RESTful events",
        "type": "esempio",
        "attachments": [
          {
            "name": "EventsREST_Client_Java",
            "link": "https://github.com/SviluppoWebAvanzato-Univaq/EventsREST_Client_Java"
          }
        ]
      },
      {
        "en": "RESTful clients in Javascript with the XMLHttpRequest object (AJAX)",
        "it": "Client RESTful in Javascript con l'oggetto XMLHttpRequest (AJAX)"
      },
      {
        "show": false,
        "en": "Synchronous and asynchronous RESTful calls",
        "it": "Chiamate RESTful sincrone e asincrone"
      },
      {
        "en": "A Javascript client for the events RESTful service: XHR client",
        "it": "Un client Javascript per il servizio RESTful events: client XHR",
        "type": "esempio",
        "attachments": [
          {
            "name": "EventsREST_Client_JS",
            "link": "https://github.com/SviluppoWebAvanzato-Univaq/EventsREST_Client_JS"
          }
        ]
      },
      {
        "en": "RESTful clients in Javascript with the Fetch API object ",
        "it": "Client RESTful in Javascript con le Fetch API",
        "attachments": [
          {
            "link": "https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"
          }
        ]
      },
      {
        "en": "A Javascript client for the events RESTful service: Fetch client",
        "it": "Un client Javascript per il servizio RESTful events: client Fetch",
        "type": "esempio",
        "attachments": [
          {
            "name": "EventsREST_Client_JS",
            "link": "https://github.com/SviluppoWebAvanzato-Univaq/EventsREST_Client_JS"
          }
        ]
      }
    ],
    "title": {
      "en": "RESTful clients",
      "it": "Client RESTful"
    }
  },
  {
    "date": "2025-06-03T16:30:00",
    "duration": 2,
    "arguments": [
      {
        "en": "RESTful in PHP with the Slim framework",
        "it": "RESTful in PHP con il framework Slim"
      },
      {
        "en": "A simple RESTful service created using Slim in PHP",
        "it": "Un semplice servizio RESTful realizzato con Slim in PHP",
        "type": "esempio",
        "attachments": [
          {
            "name": "PHP_Example_Fattura",
            "link": "https://github.com/SviluppoWebAvanzato-Univaq/PHP_Example_Fattura"
          }
        ]
      },
      {
        "show": false,
        "en": "RESTful clients in PHP with the HTTPful library",
        "it": "Client RESTful in PHP con la libreria HTTPful"
      },
      {
        "show": false,
        "en": "A PHP client for a simple RESTful service",
        "it": "Un client PHP per un semplice servizio RESTful",
        "type": "esempio",
        "attachments": [
          {
            "name": "PHP_Fattura_Client",
            "link": "https://github.com/SviluppoWebAvanzato-Univaq/PHP_Fattura_Client"
          }
        ]
      },
      {
        "en": "Basic notions about JQuery",
        "it": "Cenni su JQuery",
        "attachments": [
          {
            "link": "https://jquery.com/"
          }
        ]
      },
      {
        "en": "JQuery and AJAX: the main $ .ajax function",
        "it": "JQuery e AJAX: la funzione principale $.ajax"
      },
      {
        "en": "JQuery and AJAX: the \"shortcut\"methods $ .get, $ .post, and $ .getJSON",
        "it": "JQuery e AJAX: i metodi \"scorciatoia\"$.get, $.post e $.getJSON"
      },
      {
        "en": "RESTful clients in Javascript with JQuery",
        "it": "Client RESTful in Javascript con JQuery"
      },
      {
        "en": "A Javascript client for the events RESTful service: JQuery client",
        "it": "Un client Javascript per il servizio RESTful events: client JQuery",
        "type": "esempio",
        "attachments": [
          {
            "name": "EventsREST_Client_JS",
            "link": "https://github.com/SviluppoWebAvanzato-Univaq/EventsREST_Client_JS"
          }
        ]
      },
      {
        "en": "Beyond RESTful: notes on gRPC, Protobuf, GraphQL...",
        "it": "Oltre il RESTful: cenni su gRPC, Protobuf, GraphQL...",
        "attachments": [
          {
            "link": "https://grpc.io/"
          },
          {
            "link": "https://protobuf.dev/"
          },
          {
            "link": "https://graphql.org/"
          }
        ]
      },
      {
        "en": "Common RESTful errors: Over and underfetching, N+1 request problem, poor type safety",
        "it": "Errori RESTful comuni: Over e under fetching, N+1 request problem, scarsa type safety"
      },
      {
        "en": "RESTful best practices: rules of the right linguistic design",
        "it": "Best practices RESTful: le regole del corretto design linguistico",
        "attachments": [
          {
            "link": "https://doi.org/10.1109/SCC55611.2022.00017"
          }
        ]
      }
    ],
    "title": {
      "en": "Advanced topics",
      "it": "Argomenti avanzati"
    }
  }
]