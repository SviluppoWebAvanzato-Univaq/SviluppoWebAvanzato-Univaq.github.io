[
  {
    "date": "2023-03-03 11:30:00",
    "duration": 2,
    "slides": [
      {
        "name": "WS-Rest",
        "link": "https://github.com/SviluppoWebAvanzato-Univaq/SWA_Lecture_Slides"
      }
    ],
    "arguments": [
      {
        "en": "Course presentation",
        "it": "Presentazione del corso"
      },
      {
        "en": "Course topics: RESTful web services",
        "it": "Presentazione degli argomenti: RESTful web services"
      },
      {
        "en": "RESTful services as an extension to standard web applications",
        "it": "I servizi RESTful come estensione delle applicazioni web standard",
        "type": "esempio"
      },
      {
        "en": "RESTful services as a base for client-side applications like SPA (Angular, etc.)",
        "it": "I servizi RESTful come elemento base delle applicazioni fortemente client side come le SPA (Angular, ecc.)",
        "type": "esempio"
      },
      {
        "en": "RESTful services as a base for hybrid modile apps (Cordova, etc.)",
        "it": "I servizi RESTful come elemento base delle applicazioni mobili ibride (Cordova, ecc.)",
        "type": "esempio"
      },
      {
        "en": "Course topics: JQuery",
        "it": "Presentazione degli argomenti: JQuery"
      },
      {
        "en": "JQuery as a fundamental element for Javascript crossbrowser programming",
        "it": "JQuery come elemento essenziale per la programmazione crossbrowser in Javascript",
        "type": "esempio"
      },
      {
        "en": "JQuery as an helper in writing rich client-side interfaces",
        "it": "JQuery come elemento di aiuto nella realizzazione di interfacce ricche lato client",
        "type": "esempio"
      },
      {
        "en": "JQuery is a low-level library! Isn't it better to employ, e.g., Angular to build a RIA?",
        "it": "JQuery \u00e8 comunque una libreria di basso livello! Non \u00e8 meglio, ad esempio, usare Angular per realizzare una RIA?",
        "type": "esempio"
      },
      {
        "en": "Web services and Web 2.0",
        "it": "I Web services nel Web 2.0"
      },
      {
        "en": "What web services really are?",
        "it": "Cosa sono i web services veramente?"
      },
      {
        "en": "What is the role of web services in web 2.0?",
        "it": "Che ruolo giocano i web services nel web 2.0?"
      },
      {
        "en": "Analysis of some services published by the Public Administration on the web",
        "it": "Analisi di servizi pubblicati su web dalla PA",
        "type": "esempio"
      },
      {
        "en": "An example of real web services: Amazon",
        "it": "Un esempio di veri web services: Amazon",
        "type": "esempio"
      },
      {
        "en": "Making the Public Administration services real web services",
        "it": "Realizzare i servizi della PA come veri web services",
        "type": "esempio"
      },
      {
        "en": "RESTful web services: when to use them, and what alternatives exist",
        "it": "I servizi web RESTful: quando usarli, e quali alternative esistono"
      }
    ],
    "title": {
      "en": "Introduction to (RESTful) web services",
      "it": "Introduzione ai (RESTful) web services"
    }
  },
  {
    "date": "2023-03-10 11:30:00",
    "duration": 2,
    "slides": [
      {
        "name": "Restful",
        "link": "https://github.com/SviluppoWebAvanzato-Univaq/SWA_Lecture_Slides"
      }
    ],
    "arguments": [
      {
        "en": "The REST paradigm",
        "it": "Il paradigma REST"
      },
      {
        "en": "Web services with REST paradigm: RESTful web services",
        "it": "I servizi web con paradigma REST: RESTful web services"
      },
      {
        "en": "Basic features of a RESTful service: protocols, formats, methods",
        "it": "Caratteristiche di base di un servizio RESTful: protocolli, formati, metodi invocabili"
      },
      {
        "en": "Semantics of a RESTful web service: what kind of application it is best suited for?",
        "it": "Semantica di un servizio web RESTful: a quali tipi di applicazione si adatta meglio?"
      },
      {
        "en": "RESTful services URL structure",
        "it": "Struttura delle URL in un servizio RESTful"
      },
      {
        "en": "Mapping resources to URLs: the basic collection-item structure",
        "it": "Mappare le risorse sulle URL: la struttura di base collection-item"
      },
      {
        "en": "Mapping relational structures to RESTful URLs",
        "it": "Mappare strutture relazionali su URL RESTful",
        "type": "esempio"
      },
      {
        "en": "CRUD RESTful operations: the GET method",
        "it": "Operazioni CRUD via RESTful: il metodo GET"
      },
      {
        "en": "GET on collections: SELECT",
        "it": "GET su collezioni: SELECT",
        "type": "esempio"
      },
      {
        "en": "GET on collections with a query string: SELECT * WHERE",
        "it": "GET su collezioni con query string: SELECT * WHERE",
        "type": "esempio"
      },
      {
        "en": "Encoding of  data returned by a GET and the Accept/Content-Type headers",
        "it": "La codifica dei dati restituiti da una GET e gli header Accept/Content-Type"
      },
      {
        "en": "The return value of GET on collections: records or keys  list?",
        "it": "Il valore di ritorno delle GET su collezioni: lista di record o di sole chiavi?"
      },
      {
        "en": "GET on collections: use of the query string to create a LIMIT clause",
        "it": "GET su collezioni: usare la query string per simulare la clausola LIMIT",
        "type": "esempio"
      },
      {
        "en": "GET on item: SELECT * WHERE id = ...",
        "it": "GET su item: SELECT * WHERE id=...",
        "type": "esempio"
      },
      {
        "en": "GET on attributes: SELECT a WHERE id = ...",
        "it": "GET su attributi: SELECT a WHERE id=...",
        "type": "esempio"
      },
      {
        "en": "GET: HTTP return status",
        "it": "GET: stati HTTP di ritorno",
        "link": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"
      },
      {
        "en": "CRUD RESTful operations: the PUT method",
        "it": "Operazioni CRUD via RESTful: il metodo PUT"
      },
      {
        "en": "PUT on item: global UPDATE of a specific record",
        "it": "PUT su item: UPDATE globale su uno specifico record",
        "type": "esempio"
      },
      {
        "en": "The payload of the PUT method and the Content-Type header",
        "it": "Il payload del metodo PUT e l'header Content-Type"
      },
      {
        "en": "PUT on attributes: UPDATE pf individual attributes of a specific record",
        "it": "PUT su attributi: UPDATE di singoli attributi di uno specifico record",
        "type": "esempio"
      },
      {
        "en": "PUT on collections: replacement of an entire collection",
        "it": "PUT su collezioni: sostituzione di un'intera collezione",
        "type": "esempio"
      },
      {
        "en": "PUT: HTTP return status",
        "it": "PUT: stati HTTP di ritorno"
      },
      {
        "en": "CRUD RESTful operations: the PATCH method",
        "it": "Operazioni CRUD via RESTful: il metodo PATCH"
      },
      {
        "en": "PATCH on item: partial UPDATE of a specific record",
        "it": "PATCH su item: UPDATE parziale su uno specifico record",
        "type": "esempio"
      },
      {
        "en": "Extension of PUT semantics in environments not supporting the PATCH",
        "it": "Estensione della semantica PUT in ambienti che non supportano la PATCH"
      }
    ],
    "title": {
      "en": "RESTful services semantics 1",
      "it": "La semantica dei servizi RESTful 1"
    }
  },
  {
    "date": "2023-03-17T11:30:00",
    "duration": 2,
    "slides": [
      {
        "name": "Restful",
        "link": "https://github.com/SviluppoWebAvanzato-Univaq/SWA_Lecture_Slides"
      }
    ],
    "arguments": [
      {
        "en": "CRUD RESTful operations: the  POST method",
        "it": "Operazioni CRUD via RESTful: il metodo POST"
      },
      {
        "en": "POST on collections: INSERT of a new record",
        "it": "POST su collezioni: INSERT di un nuovo record",
        "type": "esempio"
      },
      {
        "en": "The payload of the POST method and the Content-Type header",
        "it": "Il payload del metodo POST e l'header Content-Type"
      },
      {
        "en": "POST: HTTP return status and values",
        "it": "POST: stati HTTP e valori di ritorno"
      },
      {
        "en": "CRUD RESTful operations: the DELETE method",
        "it": "Operazioni CRUD via RESTful: il metodo DELETE"
      },
      {
        "en": "DELETE on item: DELETE of a specific record",
        "it": "DELETE su item: DELETE di un record specifico",
        "type": "esempio"
      },
      {
        "en": "DELETE on collections: emptying a table",
        "it": "DELETE su collezioni: svuotamento di una tabella",
        "type": "esempio"
      },
      {
        "en": "DELETE: HTTP return status",
        "it": "DELETE: stati HTTP di ritorno"
      },
      {
        "en": "Other HTTP methods: HEAD, OPTIONS",
        "it": "Altri metodi HTTP: HEAD, OPTIONS"
      },
      {
        "en": "HEAD on resource: availability check",
        "it": "HEAD su risorsa: controllo sull'esistenza",
        "type": "esempio"
      },
      {
        "en": "HEAD used to control resource caching",
        "it": "HEAD usato per il caching delle risorse",
        "type": "esempio"
      },
      {
        "en": "OPTIONS on a resource: allowed methods check",
        "it": "OPTIONS su risorsa: controllo sui metodi supportati",
        "type": "esempio"
      },
      {
        "en": "The same-origin-policy issue for services",
        "it": "Il problema della same-origin-policy per i servizi",
        "link": "https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"
      },
      {
        "en": "How to grant access to  RESTful services from outside (their domain): CORS",
        "it": "Permettere l'accesso ai propri servizi RESTful dall'esterno (del loro dominio): CORS",
        "link": "https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"
      },
      {
        "en": "OPTIONS and CORS",
        "it": "OPTIONS e CORS"
      },
      {
        "en": "RESTful RMI-type operations",
        "it": "Operazioni di tipo RMI via RESTful"
      },
      {
        "en": "How to specify an object (context) and a method to be invoked thorugh an URL",
        "it": "Specificare un oggetto (contesto) e un metodo da invocare tramite una URL"
      },
      {
        "en": "The POST method used to make an RMI",
        "it": "Il metodo POST utilizzato per effettuare una RMI",
        "type": "esempio"
      },
      {
        "en": "Encoding the parameters and the return value of a method invoked via POST",
        "it": "Codifica dei parametri e del valore di ritorno di un metodo invocato tramite POST"
      },
      {
        "en": "Payload and result for the POST method: Accept and Content-Type header",
        "it": "Payload e risultato del metodo POST: header Accept e Content-Type"
      },
      {
        "en": "POST for RMI: HTTP return status",
        "it": "POST per RMI: stati HTTP di ritorno"
      },
      {
        "en": "RESTful RMI-type operations: GET for read methods (calculated attributes)",
        "it": "Operazioni di tipo RMI via RESTful: usare GET per metodi di lettura (attributi calcolati)",
        "type": "esempio"
      },
      {
        "en": "The POST method as an alternative to  GET on collections to define complex filters",
        "it": "Usare il metodo POST come alternativa alla GET su collezione per definire filtri complessi",
        "type": "esempio"
      },
      {
        "en": "A RESTful API advanced pattern: asynchronous long running operations",
        "it": "Un pattern avanzato per le API RESTful: l'asynchronous long running operation",
        "type": "esempio",
        "link": "http://restalk-patterns.org/long-running-operation-polling.html"
      }
    ],
    "title": {
      "en": "RESTful services semantics 2",
      "it": "La semantica dei servizi RESTful 2"
    }
  },
  {
    "date": "2023-03-24T11:30:00",
    "duration": 2,
    "arguments": [
      {
        "en": "Security in RESTful APIs",
        "it": "Sicurezza nelle API RESTful"
      },
      {
        "en": "The role of the access token in API security",
        "it": "Il ruolo del token di accesso nella sicurezza delle API"
      },
      {
        "en": "How to exchange the access token: from base methods (query string, path) to Bearer Authorization",
        "it": "Come scambiarsi il token di accesso: dai metodi rudimentali (query string, path) alla Bearer Authorization"
      },
      {
        "en": "Managing the expiration and refreshing access tokens",
        "it": "Gestire la scadenza e il refresh dei token di accesso"
      },
      {
        "en": "Generating access tokens: authentication schemes",
        "it": "Generare i token di accesso: schemi di autenticazione"
      },
      {
        "en": "How to implement the login/logout technique in a RESTful service",
        "it": "Realizzare la tecnica del login/logout in un servizio RESTful",
        "type": "esempio"
      },
      {
        "en": "OAuth: an advanced authentication system for services",
        "it": "OAuth: un sistema di autenticazione particolarmente adatto ai servizi"
      },
      {
        "en": "The OAuth 2 authorization flow",
        "it": "Il flusso di autorizzazione OAuth 2"
      },
      {
        "en": "The benefits of OAuth: no stored credentials and scoped authorization codes",
        "it": "I vantaggi di OAuth: nessuna memorizzazione delle credenziali e codici di autorizzazione con contesto"
      },
      {
        "it": "OAuth nel mondo reale",
        "en": "OAuth in the real world",
        "type": "esempio",
        "attachments": [
          {
            "link": "https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow"
          }
        ]
      },
      {
        "en": "The invoice case study",
        "it": "Il caso di studio fattura",
        "type": "esempio",
        "attachments": [
          {
            "name": "REST_Specs",
            "link": "https://github.com/SviluppoWebAvanzato-Univaq/Specifications_REST/tree/main/2022"
          }
        ]
      }
    ],
    "title": {
      "en": "RESTful services security",
      "it": "La sicurezza nei servizi RESTful"
    }
  },
  {
    "date": "2022-03-31T11:30:00",
    "duration": 2,
    "arguments": [
      {
        "en": "Defining the JSON structures required by a service (or inherit them from the code!)",
        "it": "Definire le strutture JSON necessarie a un servizio (o ereditarle da codice!)"
      },
      {
        "en": "Identifying the collection-item pattern within the API",
        "it": "Identificare il pattern collection-item all'interno delle API"
      },
      {
        "en": "Defining an  URL structure consistent with the API",
        "it": "Definire una struttura di URL coerente con le API"
      },
      {
        "en": "Outside the pattern: when violating the standard RESTful semantic helps us to be more efficient",
        "it": "Fuori dal pattern: quando violare la semantica standard RESTful ci aiuta a essere pi\u00f9 efficienti"
      },
      {
        "en": "Mapping methods and payloads on URLs",
        "it": "Mappare metodi e payload sulle URL"
      },
      {
        "en": "Managing binaries correctly and effectively",
        "it": "Gestire i binari in maniera corretta ed efficace"
      },
      {
        "en": "The invoice case study RESTful API",
        "it": "La RESTful API per il caso di studio fattura",
        "type": "esempio",
        "attachments": [
          {
            "name": "REST_Specs_RESTful",
            "link": "https://github.com/SviluppoWebAvanzato-Univaq/Specifications_REST/tree/main/2022"
          }
        ]
      },
      {
        "en": "Introduction to JSON Schema",
        "it": "Introduzione a JSON Schema"
      }
    ],
    "title": {
      "en": "RESTful services: a first case study",
      "it": "Progettazione di un servizio RESTful"
    }
  },
  {
    "date": "2023-04-14T11:30:00",
    "duration": 2,
    "slides": [
      {
        "name": "JSONSchema",
        "link": "https://github.com/SviluppoWebAvanzato-Univaq/SWA_Lecture_Slides"
      }
    ],
    "arguments": [
      {
        "en": "JSON Schema: basic structure and annotations",
        "it": "JSON Schema: struttura base e annotazioni",
        "attachments": [
          {
            "link": "https://json-schema.org/specification.html"
          }
        ]
      },
      {
        "en": "JSON Schema: meaning of the empty schema and \"modeling by restrictions\" technique",
        "it": "JSON Schema: significato della schema vuoto e tecnica della modellazione per restrizioni"
      },
      {
        "en": "JSON Schema: data types",
        "it": "JSON Schema: i tipi di dato"
      },
      {
        "en": "JSON Schema: string type and constraints",
        "it": "JSON Schema: tipo stringa e relativi vincoli"
      },
      {
        "en": "JSON Schema: numeric types and constraints",
        "it": "JSON Schema: tipi numerici e relativi vincoli"
      },
      {
        "en": "JSON Schema: object type and property specification",
        "it": "JSON Schema: tipo oggetto e specifica delle propriet\u00e0"
      },
      {
        "en": "JSON Schema: object type constraints",
        "it": "JSON Schema: vincoli del tipo oggetto"
      },
      {
        "en": "JSON Schema: array type and constraints",
        "it": "JSON Schema: tipo array e relativi vincoli"
      },
      {
        "en": "JSON Schema: enumerations",
        "it": "JSON Schema: enumerazioni"
      },
      {
        "en": "JSON Schema: schema composition (allOf, anyOf, oneOf, not)",
        "it": "JSON Schema: composizione di schemi (allOf, anyOf, oneOf, not)"
      },
      {
        "en": "JSON Schema: schema references and modularization ($ref property)",
        "it": "JSON Schema: riferimenti a schemi e modularizzazione (propriet\u00e0 $ref)"
      },
      {
        "en": "The invoice data structure defined with JSON Schema",
        "it": "La struttura dati fattura definita con JSON Schema",
        "type": "esempio",
        "attachments": [
          {
            "name": "Schema.json",
            "link": "https://github.com/SviluppoWebAvanzato-Univaq/Specifications_REST/tree/main/2022"
          }
        ]
      },
      {
        "en": "The YAML (meta) language",
        "it": "Il (meta) linguaggio YAML",
        "attachments": [
          {
            "link": "https://yaml.org/spec"
          }
        ]
      },
      {
        "en": "Relationships between YAML and JSON",
        "it": "Relazioni tra YAML e JSON"
      },
      {
        "en": "YAML syntax: scalars, objects and arrays",
        "it": "La sintassi YAML: scalari, oggetti e array"
      }
    ],
    "title": {
      "all": "JSON Schema"
    }
  },
  {
    "date": "2022-04-21T11:30:00",
    "duration": 2,
    "slides": [
      {
        "name": "OpenAPI",
        "link": "https://github.com/SviluppoWebAvanzato-Univaq/SWA_Lecture_Slides"
      }
    ],
    "arguments": [
      {
        "en": "Introduction to OpenAPI 3",
        "it": "Presentazione di OpenAPI 3"
      },
      {
        "en": "OpenAPI online tools and specification",
        "it": "Tool e specifiche OpenAPI reperibili online",
        "attachments": [
          {
            "link": "https://www.openapis.org/"
          },
          {
            "link": "https://swagger.io/tools/open-source/"
          }
        ]
      },
      {
        "en": "OpenAPI: basic structure",
        "it": "OpenAPI: struttura di base"
      },
      {
        "en": "OpenAPI: info object",
        "it": "OpenAPI: oggetto info"
      },
      {
        "en": "OpenAPI: tags object",
        "it": "OpenAPI: oggetto tags"
      },
      {
        "en": "OpenAPI: externalDocs object",
        "it": "OpenAPI: oggetto externalDocs"
      },
      {
        "en": "OpenAPI: servers",
        "it": "OpenAPI: servers"
      },
      {
        "type": "esempio"
      },
      {
        "en": "OpenAPI: specification factorization and components object",
        "it": "OpenAPI: fattorizzazione della specifica e oggetto components"
      },
      {
        "en": "OpenAPI: schema components",
        "it": "OpenAPI: componenti di tipo schema"
      },
      {
        "type": "esempio"
      },
      {
        "en": "OpenAPI: parameter components",
        "it": "OpenAPI:  componenti di tipo parameter "
      },
      {
        "en": "OpenAPI: response components",
        "it": "OpenAPI:  componenti di tipo response"
      },
      {
        "type": "esempio"
      },
      {
        "en": "OpenAPI: requestBody components",
        "it": "OpenAPI:  componenti di tipo requestBody "
      },
      {
        "type": "esempio"
      },
      {
        "en": "OpenAPI: securityScheme components",
        "it": "OpenAPI:  componenti di tipo securityScheme "
      }
    ],
    "title": {
      "all": "OpenAPI"
    }
  }
]